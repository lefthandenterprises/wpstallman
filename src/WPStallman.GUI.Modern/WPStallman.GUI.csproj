<Project Sdk="Microsoft.NET.Sdk">
  <!-- Core settings -->
  <PropertyGroup>
    <AssemblyName>WPStallman.GUI</AssemblyName>
    <RootNamespace>WPStallman.GUI</RootNamespace>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Put net8.0 FIRST so it's the default when no -f is passed -->
    <TargetFrameworks>net8.0;net8.0-windows</TargetFrameworks>
    <EnableWindowsTargeting>true</EnableWindowsTargeting>
    <Nullable>enable</Nullable>

    <!-- Cross-platform self-contained single-file publishing -->
    <SelfContained>true</SelfContained>
    <PublishSingleFile>true</PublishSingleFile>
    <IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
    <PublishTrimmed>false</PublishTrimmed>

    <!-- Ship for Linux/Windows/macOS (Intel + Apple Silicon) -->
    <RuntimeIdentifiers>linux-x64;win-x64;osx-x64;osx-arm64</RuntimeIdentifiers>
  </PropertyGroup>

  <!-- Windows GUI: hide console + embed icon (from centralized Assets) -->
  <PropertyGroup Condition="'$(TargetFramework)'=='net8.0-windows'">
    <OutputType>WinExe</OutputType>
    <ApplicationIcon>..\WPStallman.Assets\logo\app.ico</ApplicationIcon>
  </PropertyGroup>

  <!-- Non-Windows GUI: still an executable (not a class library) -->
  <PropertyGroup Condition="'$(TargetFramework)'=='net8.0'">
    <OutputType>Exe</OutputType>
    <UseAppHost>true</UseAppHost>
  </PropertyGroup>

  <!-- Also ensure WinExe when building on Windows without specifying TFM -->
  <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
    <OutputType>WinExe</OutputType>
    <ApplicationIcon>..\WPStallman.Assets\logo\app.ico</ApplicationIcon>
  </PropertyGroup>

  <!-- macOS packaging inputs: use centralized .icns; Info.plist stays in repo -->
  <ItemGroup>
    <None Include="$(WwwRootDir)\img\app.icns" Condition="Exists('$(WwwRootDir)\img\app.icns')" />
    <None Include="platforms/macos/Info.plist" Condition="Exists('platforms/macos/Info.plist')" />
  </ItemGroup>

  <!-- Make icons available as static web assets for runtime lookups -->
  <ItemGroup>
    <None Include="..\WPStallman.Assets\logo\app.ico" Link="wwwroot\img\app.ico">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Include="..\WPStallman.Assets\logo\app.icns" Link="wwwroot\img\app.icns">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Include="..\WPStallman.Assets\logo\app-icon-256.png" Link="wwwroot\img\app.png">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="GtkSharp" Version="3.24.24.95" />
    <PackageReference Include="LiteDB" Version="5.0.21" />
    <!-- Modern line uses newer Photino -->
    <PackageReference Include="Photino.Native" Version="4.0.22" />
    <PackageReference Include="Photino.NET" Version="4.0.16" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\WPStallman.Core\WPStallman.Core.csproj" />
  </ItemGroup>

  <!-- macOS: create a simple .app bundle after publish -->
  <Target Name="CreateMacAppBundle"
          AfterTargets="Publish"
          Condition="'$(RuntimeIdentifier)'=='osx-x64' OR '$(RuntimeIdentifier)'=='osx-arm64'">
    <PropertyGroup>
      <MacAppName>WPStallman</MacAppName>
      <MacAppDir>$(PublishDir)$(MacAppName).app</MacAppDir>
    </PropertyGroup>

    <MakeDir Directories="$(MacAppDir)/Contents;$(MacAppDir)/Contents/MacOS;$(MacAppDir)/Contents/Resources" />

    <ItemGroup>
      <_PublishedFiles Include="$(PublishDir)**/*" Exclude="$(MacAppDir)/**" />
    </ItemGroup>
    <Copy SourceFiles="@(_PublishedFiles)"
          DestinationFiles="@(_PublishedFiles->'$(MacAppDir)/Contents/MacOS/%(RecursiveDir)%(Filename)%(Extension)')" />

    <Copy SourceFiles="$(WwwRootDir)/img/app.icns"
          DestinationFiles="$(MacAppDir)/Contents/Resources/app.icns"
          Condition="Exists('$(WwwRootDir)/img/app.icns')" />

    <Copy SourceFiles="platforms/macos/Info.plist"
          DestinationFiles="$(MacAppDir)/Contents/Info.plist"
          Condition="Exists('platforms/macos/Info.plist')" />
  </Target>

  <!-- Sync icon source artwork from Assets into centralized wwwroot/img -->
  <PropertyGroup>
    <IconSourceDir>$(RepoRoot)src\WPStallman.Assets\logo</IconSourceDir>
    <IconDestDir>$(WwwRootDir)\img</IconDestDir>
  </PropertyGroup>

  <Target Name="SyncIcons"
          BeforeTargets="Build;Publish"
          Condition="Exists('$(IconSourceDir)')">
    <MakeDir Directories="$(IconDestDir)" />

    <ItemGroup>
      <_IconFiles Include="$(IconSourceDir)\app-icon-16.png"  Condition="Exists('$(IconSourceDir)\app-icon-16.png')" />
      <_IconFiles Include="$(IconSourceDir)\app-icon-24.png"  Condition="Exists('$(IconSourceDir)\app-icon-24.png')" />
      <_IconFiles Include="$(IconSourceDir)\app-icon-32.png"  Condition="Exists('$(IconSourceDir)\app-icon-32.png')" />
      <_IconFiles Include="$(IconSourceDir)\app-icon-48.png"  Condition="Exists('$(IconSourceDir)\app-icon-48.png')" />
      <_IconFiles Include="$(IconSourceDir)\app-icon-64.png"  Condition="Exists('$(IconSourceDir)\app-icon-64.png')" />
      <_IconFiles Include="$(IconSourceDir)\app-icon-128.png" Condition="Exists('$(IconSourceDir)\app-icon-128.png')" />
      <_IconFiles Include="$(IconSourceDir)\app-icon-256.png" Condition="Exists('$(IconSourceDir)\app-icon-256.png')" />
      <_IconFiles Include="$(IconSourceDir)\app-icon-512.png" Condition="Exists('$(IconSourceDir)\app-icon-512.png')" />
      <_IconFiles Include="$(IconSourceDir)\app.ico"  Condition="Exists('$(IconSourceDir)\app.ico')" />
      <_IconFiles Include="$(IconSourceDir)\app.icns" Condition="Exists('$(IconSourceDir)\app.icns')" />
    </ItemGroup>

    <Message Text="Syncing icons: @(_IconFiles) -> $(IconDestDir)" Importance="Low" />
    <Copy SourceFiles="@(_IconFiles)"
          DestinationFiles="@(_IconFiles->'$(IconDestDir)\%(Filename)%(Extension)')"
          SkipUnchangedFiles="true" />
  </Target>
  <Target Name="EnsureAppPng" AfterTargets="Publish">
  <PropertyGroup>
    <OutImgDir>$(PublishDir)wwwroot/img</OutImgDir>
  </PropertyGroup>
  <ItemGroup>
    <_FallbackIcon Include="$(OutImgDir)/app-icon-256.png" Condition="Exists('$(OutImgDir)/app-icon-256.png')" />
  </ItemGroup>
  <Copy
    SourceFiles="@(_FallbackIcon)"
    DestinationFiles="@(_FallbackIcon->'$(OutImgDir)/app.png')"
    Condition="Exists('$(OutImgDir)') AND !Exists('$(OutImgDir)/app.png') AND '%(_FallbackIcon.Identity)' != ''" />
</Target>

</Project>
